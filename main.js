/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => OpenInterpreterPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_child_process = require("child_process");
var path = __toESM(require("path"));
var os = __toESM(require("os"));
var fs = __toESM(require("fs/promises"));
var DEFAULT_SETTINGS = {
  apiKey: ""
};
var InstallationGuideModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    let { contentEl } = this;
    contentEl.setText("Open Interpreter is not installed.");
    contentEl.createEl("p", {
      text: "To install, run the following command in your terminal:"
    });
    contentEl.createEl("pre", { text: "pip install open-interpreter" });
    contentEl.createEl("p", { text: "For more information, visit:" });
    contentEl.createEl("a", {
      text: "Open Interpreter Documentation",
      href: "https://docs.openinterpreter.com/getting-started/introduction"
    });
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
var InterpreterInputModal = class extends import_obsidian.Modal {
  constructor(app, onSubmit) {
    super(app);
    this.result = "";
    this.onSubmit = onSubmit;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Enter command for Open Interpreter" });
    new import_obsidian.Setting(contentEl).setName("Command").addText(
      (text) => text.onChange((value) => {
        this.result = value;
      })
    );
    new import_obsidian.Setting(contentEl).addButton(
      (btn) => btn.setButtonText("Submit").setCta().onClick(() => {
        this.close();
        this.onSubmit(this.result);
      })
    );
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var InterpreterChatModal = class extends import_obsidian.Modal {
  constructor(app, interpreter) {
    super(app);
    this.interpreter = interpreter;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h2", { text: "Open Interpreter Chat" });
    this.outputEl = contentEl.createEl("div", { cls: "interpreter-output" });
    this.outputEl.style.height = "400px";
    this.outputEl.style.overflowY = "scroll";
    this.outputEl.style.border = "1px solid #ccc";
    this.outputEl.style.padding = "10px";
    this.outputEl.style.marginBottom = "10px";
    this.createInputArea();
    this.createYesNoButtons();
    const sendButton = contentEl.createEl("button", { text: "Send" });
    sendButton.onclick = () => this.sendMessage();
    this.setupInterpreterListeners();
  }
  setupInterpreterListeners() {
    if (this.interpreter.stdout) {
      this.interpreter.stdout.on("data", (data) => {
        this.appendOutput(data.toString());
      });
    }
    if (this.interpreter.stderr) {
      this.interpreter.stderr.on("data", (data) => {
        this.appendOutput(`Error: ${data.toString()}`, true);
      });
    }
    this.interpreter.on("close", (code) => {
      this.appendOutput(`Interpreter closed with code ${code}`);
      this.close();
    });
  }
  onClose() {
    this.interpreter.kill();
    const { contentEl } = this;
    contentEl.empty();
  }
  appendOutput(text, isError = false) {
    const chunks = text.match(/.{1,1000}/g) || [];
    chunks.forEach((chunk) => {
      const p = this.outputEl.createEl("p");
      p.textContent = chunk;
      if (isError) {
        p.style.color = "red";
      }
    });
    this.outputEl.scrollTop = this.outputEl.scrollHeight;
    if (text.trim().endsWith("Would you like to run this code? (y/n)")) {
      this.showYesNoButtons();
    } else {
      this.showInputArea();
    }
  }
  sendMessage(overrideMessage) {
    let message;
    if (overrideMessage) {
      message = overrideMessage;
    } else {
      message = this.inputEl.value;
      this.inputEl.value = "";
    }
    if (this.interpreter.stdin) {
      this.interpreter.stdin.write(message + "\n");
    }
    this.appendOutput(`You: ${message}`);
    this.showInputArea();
  }
  createInputArea() {
    this.inputEl = this.contentEl.createEl("textarea", {
      cls: "interpreter-input"
    });
    this.inputEl.style.width = "100%";
    this.inputEl.style.height = "100px";
    this.inputEl.style.display = "block";
  }
  createYesNoButtons() {
    this.buttonContainer = this.contentEl.createEl("div", {
      cls: "yes-no-buttons"
    });
    this.buttonContainer.style.display = "flex";
    this.buttonContainer.style.justifyContent = "space-between";
    this.buttonContainer.style.marginTop = "10px";
    this.yesButton = this.buttonContainer.createEl("button", { text: "Yes" });
    this.yesButton.style.backgroundColor = "#e6ffe6";
    this.yesButton.style.color = "#006600";
    this.yesButton.style.border = "1px solid #006600";
    this.yesButton.style.padding = "10px 20px";
    this.yesButton.style.borderRadius = "5px";
    this.yesButton.style.cursor = "pointer";
    this.noButton = this.buttonContainer.createEl("button", { text: "No" });
    this.noButton.style.backgroundColor = "#ffe6e6";
    this.noButton.style.color = "#660000";
    this.noButton.style.border = "1px solid #660000";
    this.noButton.style.padding = "10px 20px";
    this.noButton.style.borderRadius = "5px";
    this.noButton.style.cursor = "pointer";
    this.yesButton.onclick = () => this.sendMessage("y");
    this.noButton.onclick = () => this.sendMessage("n");
    this.buttonContainer.style.display = "none";
  }
  showInputArea() {
    this.inputEl.style.display = "block";
    this.buttonContainer.style.display = "none";
  }
  showYesNoButtons() {
    this.inputEl.style.display = "none";
    this.buttonContainer.style.display = "block";
  }
};
var OpenInterpreterPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.interpreterInstalled = false;
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new OpenInterpreterSettingTab(this.app, this));
    this.addCommand({
      id: "run-interpreter",
      name: "Run Open Interpreter",
      callback: () => this.runInterpreter()
    });
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async checkInterpreterInstallation() {
    return new Promise((resolve) => {
      const command = '$SHELL -i -c "which interpreter"';
      console.log("Executing command:", command);
      (0, import_child_process.exec)(command, (error, stdout, stderr) => {
        if (error) {
          console.error("Error finding interpreter:", error);
          console.log("Stderr:", stderr);
          this.interpreterInstalled = false;
        } else {
          const interpreterPath = stdout.trim();
          console.log("Interpreter found at:", interpreterPath);
          this.interpreterInstalled = !!interpreterPath;
        }
        console.log("Interpreter installed:", this.interpreterInstalled);
        resolve();
      });
    });
  }
  async getInterpreterProfilePath() {
    const homedir2 = os.homedir();
    const profileDir = path.join(
      homedir2,
      "Library",
      "Application Support",
      "open-interpreter",
      "profiles"
    );
    const profilePath = path.join(profileDir, "obsidian.py");
    await fs.mkdir(profileDir, { recursive: true });
    if (!await fs.stat(profilePath).catch(() => false)) {
      await fs.writeFile(
        profilePath,
        "# Obsidian profile for Open Interpreter\n"
      );
    }
    return profilePath;
  }
  getVaultPath() {
    const adapter = this.app.vault.adapter;
    if (adapter && "basePath" in adapter) {
      return adapter.basePath;
    }
    const rootFolder = this.app.vault.getRoot();
    if (rootFolder instanceof import_obsidian.TFolder) {
      return rootFolder.path;
    }
    console.error("Could not determine vault path");
    return null;
  }
  async runInterpreter() {
    await this.checkInterpreterInstallation();
    if (!this.interpreterInstalled) {
      console.log("Interpreter not installed, showing modal");
      new InstallationGuideModal(this.app).open();
      return;
    }
    new InterpreterInputModal(this.app, (command) => {
      this.executeInterpreterCommand(command);
    }).open();
  }
  async executeInterpreterCommand(command) {
    const profilePath = await this.getInterpreterProfilePath();
    const vaultPath = this.getVaultPath();
    if (!vaultPath) {
      console.error("Vault path could not be determined.");
      new import_obsidian.Notice(
        "Unable to determine vault path. Please check console for details."
      );
      return;
    }
    const interpreterPath = await this.getInterpreterPath();
    if (!interpreterPath) {
      new import_obsidian.Notice(
        "Unable to find the interpreter executable. Please make sure it's installed and in your PATH."
      );
      return;
    }
    const env = { ...process.env, OPENAI_API_KEY: this.settings.apiKey };
    const escapedProfilePath = profilePath.replace(/'/g, "'\\''");
    const child = (0, import_child_process.spawn)(
      interpreterPath,
      ["--profile", `'${escapedProfilePath}'`],
      {
        cwd: vaultPath,
        env,
        shell: true
      }
    );
    if (child.stdin) {
      child.stdin.write(command + "\n");
    }
    new InterpreterChatModal(this.app, child).open();
  }
  getInterpreterPath() {
    return new Promise((resolve) => {
      const isWindows = process.platform === "win32";
      const command = isWindows ? "where interpreter" : "$SHELL -i -c 'which interpreter'";
      console.log("Executing command:", command);
      (0, import_child_process.exec)(command, async (error, stdout, stderr) => {
        if (error) {
          console.error("Error finding interpreter:", error);
          console.log("Stdout:", stdout);
          console.log("Stderr:", stderr);
          const commonPaths = [
            "/usr/local/bin/interpreter",
            "/usr/bin/interpreter",
            `${os.homedir()}/Library/Python/3.11/bin/interpreter`,
            `${os.homedir()}/Library/Python/3.10/bin/interpreter`,
            `${os.homedir()}/Library/Python/3.9/bin/interpreter`
          ];
          for (const path2 of commonPaths) {
            try {
              await fs.access(path2);
              resolve(path2);
              return;
            } catch (e) {
            }
          }
          resolve(null);
        } else {
          console.log("Interpreter found at:", stdout.trim());
          resolve(stdout.trim());
        }
      });
    });
  }
  onunload() {
    console.log("unloading open interpreter plugin");
  }
};
var OpenInterpreterSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Open Interpreter Settings" });
    new import_obsidian.Setting(containerEl).setName("OpenAI API Key").setDesc("Enter your OpenAI API key").addText(
      (text) => text.setPlaceholder("Enter your api key").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
        this.plugin.settings.apiKey = value;
        await this.plugin.saveSettings();
      })
    );
  }
};
//# sourceMappingURL=data:application/json;base64,
